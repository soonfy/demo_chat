{
  "title": "Express API Cheat Sheet",
  "author": "soonfy <soonfy@163.com>",
  "description": "Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.",
  "apis": [
    {
      "name": "express()",
      "description": "Creates an Express application. The express() function is a top-level function exported by the express module.",
      "Methods": [
        {
          "api": "express.static(root, [options])",
          "description": "This is the only built-in middleware function in Express.\nIt serves static files and is based on serve-static."
        },
        {
          "api": "express.Router([options])",
          "description": "Creates a new router object."
        },
        {
          "api": "app.locals",
          "description": "The app.locals object has properties that are local variables within the application."
        },
        {
          "api": "app.mountpath",
          "description": "The app.mountpath property contains one or more path patterns on which a sub-app was mounted."
        },
        {
          "api": "app.on('mount', callback(parent))",
          "description": "The mount event is fired on a sub-app, when it is mounted on a parent app. The parent app is passed to the callback function."
        },
        {
          "api": "app.all(path, callback [, callback ...])",
          "description": "This method is like the standard app.METHOD() methods,\nexcept it matches all HTTP verbs."
        },
        {
          "api": "app.delete(path, callback [, callback ...])",
          "description": "Routes HTTP DELETE requests to the specified path with the specified callback functions.\nFor more information, see the routing guide."
        },
        {
          "api": "app.disable(name)",
          "description": "Sets the Boolean setting name to false, where name is one of the properties from the app settings table.\nCalling app.set('foo', false) for a Boolean property is the same as calling app.disable('foo')."
        },
        {
          "api": "app.disabled(name)",
          "description": "Returns true if the Boolean setting name is disabled (false), where name is one of the properties from\nthe app settings table."
        },
        {
          "api": "app.enable(name)",
          "description": "Sets the Boolean setting name to true, where name is one of the properties from the app settings table.\nCalling app.set('foo', true) for a Boolean property is the same as calling app.enable('foo')."
        },
        {
          "api": "app.enabled(name)",
          "description": "Returns true if the setting name is enabled (true), where name is one of the\nproperties from the app settings table."
        },
        {
          "api": "app.engine(ext, callback)",
          "description": "Registers the given template engine callback as ext."
        },
        {
          "api": "app.get(name)",
          "description": "Returns the value of name app setting, where name is one of strings in the\napp settings table. For example:"
        },
        {
          "api": "app.get(path, callback [, callback ...])",
          "description": "Routes HTTP GET requests to the specified path with the specified callback functions."
        },
        {
          "api": "app.listen(path, [callback])",
          "description": "Starts a UNIX socket and listens for connections on the given path.\nThis method is identical to Node’s http.Server.listen()."
        },
        {
          "api": "app.METHOD(path, callback [, callback ...])",
          "description": "Routes an HTTP request, where METHOD is the HTTP method of the request, such as GET,\nPUT, POST, and so on, in lowercase. Thus, the actual methods are app.get(),\napp.post(), app.put(), and so on. See Routing methods below for the complete list."
        },
        {
          "api": "app.param([name], callback)",
          "description": "Add callback triggers to route parameters, where name is the name of the parameter or an array of them, and callback is the callback function. The parameters of the callback function are the request object, the response object, the next middleware, the value of the parameter and the name of the parameter, in that order."
        },
        {
          "api": "app.path()",
          "description": "Returns the canonical path of the app, a string."
        },
        {
          "api": "app.post(path, callback [, callback ...])",
          "description": "Routes HTTP POST requests to the specified path with the specified callback functions.\nFor more information, see the routing guide."
        },
        {
          "api": "app.put(path, callback [, callback ...])",
          "description": "Routes HTTP PUT requests to the specified path with the specified callback functions."
        },
        {
          "api": "app.render(view, [locals], callback)",
          "description": "Returns the rendered HTML of a view via the callback function. It accepts an optional parameter\nthat is an object containing local variables for the view. It is like res.render(),\nexcept it cannot send the rendered view to the client on its own."
        },
        {
          "api": "app.route(path)",
          "description": "Returns an instance of a single route, which you can then use to handle HTTP verbs with optional middleware.\nUse app.route() to avoid duplicate route names (and thus typo errors)."
        },
        {
          "api": "app.set(name, value)",
          "description": "Assigns setting name to value, where name is one of the properties from\nthe app settings table."
        },
        {
          "api": "app.use([path,] callback [, callback...])",
          "description": "Mounts the specified middleware function or functions\nat the specified path:\nthe middleware function is executed when the base of the requested path matches path."
        },
        {
          "api": "req.app",
          "description": "This property holds a reference to the instance of the Express application that is using the middleware."
        },
        {
          "api": "req.baseUrl",
          "description": "The URL path on which a router instance was mounted."
        },
        {
          "api": "req.body",
          "description": "Contains key-value pairs of data submitted in the request body.\nBy default, it is undefined, and is populated when you use body-parsing middleware such\nas body-parser and multer."
        },
        {
          "api": "req.cookies",
          "description": "When using cookie-parser middleware, this property is an object that\ncontains cookies sent by the request. If the request contains no cookies, it defaults to {}."
        },
        {
          "api": "req.fresh",
          "description": "Indicates whether the request is “fresh.” It is the opposite of req.stale."
        },
        {
          "api": "req.hostname",
          "description": "Contains the hostname derived from the Host HTTP header."
        },
        {
          "api": "req.ip",
          "description": "Contains the remote IP address of the request."
        },
        {
          "api": "req.ips",
          "description": "When the trust proxy setting does not evaluate to false,\nthis property contains an array of IP addresses\nspecified in the X-Forwarded-For request header. Otherwise, it contains an\nempty array. This header can be set by the client or by the proxy."
        },
        {
          "api": "req.method",
          "description": "Contains a string corresponding to the HTTP method of the request:\nGET, POST, PUT, and so on."
        },
        {
          "api": "req.originalUrl",
          "description": "req.url is not a native Express property, it is inherited from Node’s http module."
        },
        {
          "api": "req.params",
          "description": "This property is an object containing properties mapped to the named route “parameters”. For example, if you have the route /user/:name, then the “name” property is available as req.params.name. This object defaults to {}."
        },
        {
          "api": "req.path",
          "description": "Contains the path part of the request URL."
        },
        {
          "api": "req.protocol",
          "description": "Contains the request protocol string: either http or (for TLS requests) https."
        },
        {
          "api": "req.query",
          "description": "This property is an object containing a property for each query string parameter in the route.\nIf there is no query string, it is the empty object, {}."
        },
        {
          "api": "req.route",
          "description": "Contains the currently-matched route, a string. For example:"
        },
        {
          "api": "req.secure",
          "description": "A Boolean property that is true if a TLS connection is established. Equivalent to:"
        },
        {
          "api": "req.signedCookies",
          "description": "When using cookie-parser middleware, this property\ncontains signed cookies sent by the request, unsigned and ready for use. Signed cookies reside\nin a different object to show developer intent; otherwise, a malicious attack could be placed on\nreq.cookie values (which are easy to spoof). Note that signing a cookie does not make it “hidden”\nor encrypted; but simply prevents tampering (because the secret used to sign is private)."
        },
        {
          "api": "req.stale",
          "description": "Indicates whether the request is “stale,” and is the opposite of req.fresh.\nFor more information, see req.fresh."
        },
        {
          "api": "req.subdomains",
          "description": "An array of subdomains in the domain name of the request."
        },
        {
          "api": "req.xhr",
          "description": "A Boolean property that is true if the request’s X-Requested-With header field is\n“XMLHttpRequest”, indicating that the request was issued by a client library such as jQuery."
        },
        {
          "api": "req.accepts(types)",
          "description": "Checks if the specified content types are acceptable, based on the request’s Accept HTTP header field.\nThe method returns the best match, or if none of the specified content types is acceptable, returns\nfalse (in which case, the application should respond with 406 \"Not Acceptable\")."
        },
        {
          "api": "req.acceptsCharsets(charset [, ...])",
          "description": "Returns the first accepted charset of the specified character sets,\nbased on the request’s Accept-Charset HTTP header field.\nIf none of the specified charsets is accepted, returns false."
        },
        {
          "api": "req.acceptsEncodings(encoding [, ...])",
          "description": "Returns the first accepted encoding of the specified encodings,\nbased on the request’s Accept-Encoding HTTP header field.\nIf none of the specified encodings is accepted, returns false."
        },
        {
          "api": "req.acceptsLanguages(lang [, ...])",
          "description": "Returns the first accepted language of the specified languages,\nbased on the request’s Accept-Language HTTP header field.\nIf none of the specified languages is accepted, returns false."
        },
        {
          "api": "req.get(field)",
          "description": "Returns the specified HTTP request header field (case-insensitive match).\nThe Referrer and Referer fields are interchangeable."
        },
        {
          "api": "req.is(type)",
          "description": "Returns true if the incoming request’s “Content-Type” HTTP header field\nmatches the MIME type specified by the type parameter.\nReturns false otherwise."
        },
        {
          "api": "req.param(name [, defaultValue])",
          "description": "Deprecated. Use either req.params, req.body or req.query, as applicable."
        },
        {
          "api": "req.range(size[, options])",
          "description": "Range header parser."
        },
        {
          "api": "res.app",
          "description": "This property holds a reference to the instance of the Express application that is using the middleware."
        },
        {
          "api": "res.headersSent",
          "description": "Boolean property that indicates if the app sent HTTP headers for the response."
        },
        {
          "api": "res.locals",
          "description": "An object that contains response local variables scoped to the request, and therefore available only to\nthe view(s) rendered during that request / response cycle (if any). Otherwise,\nthis property is identical to app.locals."
        },
        {
          "api": "res.append(field [, value])",
          "description": "res.append() is supported by Express v4.11.0+"
        },
        {
          "api": "res.attachment([filename])",
          "description": "Sets the HTTP response Content-Disposition header field to “attachment”. If a filename is given,\nthen it sets the Content-Type based on the extension name via res.type(),\nand sets the Content-Disposition “filename=” parameter."
        },
        {
          "api": "res.cookie(name, value [, options])",
          "description": "Sets cookie name to value. The value parameter may be a string or object converted to JSON."
        },
        {
          "api": "res.clearCookie(name [, options])",
          "description": "Clears the cookie specified by name. For details about the options object, see res.cookie()."
        },
        {
          "api": "res.download(path [, filename] [, fn])",
          "description": "Transfers the file at path as an “attachment”. Typically, browsers will prompt the user for download.\nBy default, the Content-Disposition header “filename=” parameter is path (this typically appears in the browser dialog).\nOverride this default with the filename parameter."
        },
        {
          "api": "res.end([data] [, encoding])",
          "description": "Ends the response process. This method actually comes from Node core, specifically the response.end() method of http.ServerResponse."
        },
        {
          "api": "res.format(object)",
          "description": "Performs content-negotiation on the Accept HTTP header on the request object, when present.\nIt uses req.accepts() to select a handler for the request, based on the acceptable\ntypes ordered by their quality values. If the header is not specified, the first callback is invoked.\nWhen no match is found, the server responds with 406 “Not Acceptable”, or invokes the default callback."
        },
        {
          "api": "res.get(field)",
          "description": "Returns the HTTP response header specified by field.\nThe match is case-insensitive."
        },
        {
          "api": "res.json([body])",
          "description": "Sends a JSON response. This method sends a response (with the correct content-type) that is the parameter converted to a\nJSON string using JSON.stringify()."
        },
        {
          "api": "res.jsonp([body])",
          "description": "Sends a JSON response with JSONP support. This method is identical to res.json(),\nexcept that it opts-in to JSONP callback support."
        },
        {
          "api": "res.links(links)",
          "description": "Joins the links provided as properties of the parameter to populate the response’s\nLink HTTP header field."
        },
        {
          "api": "res.location(path)",
          "description": "Sets the response Location HTTP header to the specified path parameter."
        },
        {
          "api": "res.redirect([status,] path)",
          "description": "Redirects to the URL derived from the specified path, with specified status, a positive integer\nthat corresponds to an HTTP status code .\nIf not specified, status defaults to “302 “Found”."
        },
        {
          "api": "res.render(view [, locals] [, callback])",
          "description": "Renders a view and sends the rendered HTML string to the client.\nOptional parameters:"
        },
        {
          "api": "res.send([body])",
          "description": "Sends the HTTP response."
        },
        {
          "api": "res.sendFile(path [, options] [, fn])",
          "description": "res.sendFile() is supported by Express v4.8.0 onwards."
        },
        {
          "api": "res.sendStatus(statusCode)",
          "description": "Sets the response HTTP status code to statusCode and send its string representation as the response body."
        },
        {
          "api": "res.set(field [, value])",
          "description": "Sets the response’s HTTP header field to value.\nTo set multiple fields at once, pass an object as the parameter."
        },
        {
          "api": "res.status(code)",
          "description": "Sets the HTTP status for the response.\nIt is a chainable alias of Node’s response.statusCode."
        },
        {
          "api": "res.type(type)",
          "description": "Sets the Content-Type HTTP header to the MIME type as determined by\nmime.lookup() for the specified type.\nIf type contains the “/” character, then it sets the Content-Type to type."
        },
        {
          "api": "res.vary(field)",
          "description": "Adds the field to the Vary response header, if it is not there already."
        },
        {
          "api": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router.",
          "description": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router."
        },
        {
          "api": "router.all(path, [callback, ...] callback)",
          "description": "This method is just like the router.METHOD() methods, except that it matches all HTTP methods (verbs)."
        },
        {
          "api": "router.METHOD(path, [callback, ...] callback)",
          "description": "The router.METHOD() methods provide the routing functionality in Express,\nwhere METHOD is one of the HTTP methods, such as GET, PUT, POST, and so on,\nin lowercase. Thus, the actual methods are router.get(), router.post(),\nrouter.put(), and so on."
        },
        {
          "api": "router.param(name, callback)",
          "description": "Adds callback triggers to route parameters, where name is the name of the parameter and callback is the callback function. Although name is technically optional, using this method without it is deprecated starting with Express v4.11.0 (see below)."
        },
        {
          "api": "router.route(path)",
          "description": "Returns an instance of a single route which you can then use to handle HTTP verbs\nwith optional middleware. Use router.route() to avoid duplicate route naming and\nthus typing errors."
        },
        {
          "api": "router.use([path], [function, ...] function)",
          "description": "Uses the specified middleware function or functions, with optional mount path path, that defaults to “/”."
        }
      ]
    },
    {
      "name": "Application",
      "description": "The app object conventionally denotes the Express application.\nCreate it by calling the top-level express() function exported by the Express module:",
      "Properties": [
        {
          "api": "app.locals",
          "description": "The app.locals object has properties that are local variables within the application."
        },
        {
          "api": "app.mountpath",
          "description": "The app.mountpath property contains one or more path patterns on which a sub-app was mounted."
        },
        {
          "api": "app.on('mount', callback(parent))",
          "description": "The mount event is fired on a sub-app, when it is mounted on a parent app. The parent app is passed to the callback function."
        },
        {
          "api": "app.all(path, callback [, callback ...])",
          "description": "This method is like the standard app.METHOD() methods,\nexcept it matches all HTTP verbs."
        },
        {
          "api": "app.delete(path, callback [, callback ...])",
          "description": "Routes HTTP DELETE requests to the specified path with the specified callback functions.\nFor more information, see the routing guide."
        },
        {
          "api": "app.disable(name)",
          "description": "Sets the Boolean setting name to false, where name is one of the properties from the app settings table.\nCalling app.set('foo', false) for a Boolean property is the same as calling app.disable('foo')."
        },
        {
          "api": "app.disabled(name)",
          "description": "Returns true if the Boolean setting name is disabled (false), where name is one of the properties from\nthe app settings table."
        },
        {
          "api": "app.enable(name)",
          "description": "Sets the Boolean setting name to true, where name is one of the properties from the app settings table.\nCalling app.set('foo', true) for a Boolean property is the same as calling app.enable('foo')."
        },
        {
          "api": "app.enabled(name)",
          "description": "Returns true if the setting name is enabled (true), where name is one of the\nproperties from the app settings table."
        },
        {
          "api": "app.engine(ext, callback)",
          "description": "Registers the given template engine callback as ext."
        },
        {
          "api": "app.get(name)",
          "description": "Returns the value of name app setting, where name is one of strings in the\napp settings table. For example:"
        },
        {
          "api": "app.get(path, callback [, callback ...])",
          "description": "Routes HTTP GET requests to the specified path with the specified callback functions."
        },
        {
          "api": "app.listen(path, [callback])",
          "description": "Starts a UNIX socket and listens for connections on the given path.\nThis method is identical to Node’s http.Server.listen()."
        },
        {
          "api": "app.METHOD(path, callback [, callback ...])",
          "description": "Routes an HTTP request, where METHOD is the HTTP method of the request, such as GET,\nPUT, POST, and so on, in lowercase. Thus, the actual methods are app.get(),\napp.post(), app.put(), and so on. See Routing methods below for the complete list."
        },
        {
          "api": "app.param([name], callback)",
          "description": "Add callback triggers to route parameters, where name is the name of the parameter or an array of them, and callback is the callback function. The parameters of the callback function are the request object, the response object, the next middleware, the value of the parameter and the name of the parameter, in that order."
        },
        {
          "api": "app.path()",
          "description": "Returns the canonical path of the app, a string."
        },
        {
          "api": "app.post(path, callback [, callback ...])",
          "description": "Routes HTTP POST requests to the specified path with the specified callback functions.\nFor more information, see the routing guide."
        },
        {
          "api": "app.put(path, callback [, callback ...])",
          "description": "Routes HTTP PUT requests to the specified path with the specified callback functions."
        },
        {
          "api": "app.render(view, [locals], callback)",
          "description": "Returns the rendered HTML of a view via the callback function. It accepts an optional parameter\nthat is an object containing local variables for the view. It is like res.render(),\nexcept it cannot send the rendered view to the client on its own."
        },
        {
          "api": "app.route(path)",
          "description": "Returns an instance of a single route, which you can then use to handle HTTP verbs with optional middleware.\nUse app.route() to avoid duplicate route names (and thus typo errors)."
        },
        {
          "api": "app.set(name, value)",
          "description": "Assigns setting name to value, where name is one of the properties from\nthe app settings table."
        },
        {
          "api": "app.use([path,] callback [, callback...])",
          "description": "Mounts the specified middleware function or functions\nat the specified path:\nthe middleware function is executed when the base of the requested path matches path."
        },
        {
          "api": "req.app",
          "description": "This property holds a reference to the instance of the Express application that is using the middleware."
        },
        {
          "api": "req.baseUrl",
          "description": "The URL path on which a router instance was mounted."
        },
        {
          "api": "req.body",
          "description": "Contains key-value pairs of data submitted in the request body.\nBy default, it is undefined, and is populated when you use body-parsing middleware such\nas body-parser and multer."
        },
        {
          "api": "req.cookies",
          "description": "When using cookie-parser middleware, this property is an object that\ncontains cookies sent by the request. If the request contains no cookies, it defaults to {}."
        },
        {
          "api": "req.fresh",
          "description": "Indicates whether the request is “fresh.” It is the opposite of req.stale."
        },
        {
          "api": "req.hostname",
          "description": "Contains the hostname derived from the Host HTTP header."
        },
        {
          "api": "req.ip",
          "description": "Contains the remote IP address of the request."
        },
        {
          "api": "req.ips",
          "description": "When the trust proxy setting does not evaluate to false,\nthis property contains an array of IP addresses\nspecified in the X-Forwarded-For request header. Otherwise, it contains an\nempty array. This header can be set by the client or by the proxy."
        },
        {
          "api": "req.method",
          "description": "Contains a string corresponding to the HTTP method of the request:\nGET, POST, PUT, and so on."
        },
        {
          "api": "req.originalUrl",
          "description": "req.url is not a native Express property, it is inherited from Node’s http module."
        },
        {
          "api": "req.params",
          "description": "This property is an object containing properties mapped to the named route “parameters”. For example, if you have the route /user/:name, then the “name” property is available as req.params.name. This object defaults to {}."
        },
        {
          "api": "req.path",
          "description": "Contains the path part of the request URL."
        },
        {
          "api": "req.protocol",
          "description": "Contains the request protocol string: either http or (for TLS requests) https."
        },
        {
          "api": "req.query",
          "description": "This property is an object containing a property for each query string parameter in the route.\nIf there is no query string, it is the empty object, {}."
        },
        {
          "api": "req.route",
          "description": "Contains the currently-matched route, a string. For example:"
        },
        {
          "api": "req.secure",
          "description": "A Boolean property that is true if a TLS connection is established. Equivalent to:"
        },
        {
          "api": "req.signedCookies",
          "description": "When using cookie-parser middleware, this property\ncontains signed cookies sent by the request, unsigned and ready for use. Signed cookies reside\nin a different object to show developer intent; otherwise, a malicious attack could be placed on\nreq.cookie values (which are easy to spoof). Note that signing a cookie does not make it “hidden”\nor encrypted; but simply prevents tampering (because the secret used to sign is private)."
        },
        {
          "api": "req.stale",
          "description": "Indicates whether the request is “stale,” and is the opposite of req.fresh.\nFor more information, see req.fresh."
        },
        {
          "api": "req.subdomains",
          "description": "An array of subdomains in the domain name of the request."
        },
        {
          "api": "req.xhr",
          "description": "A Boolean property that is true if the request’s X-Requested-With header field is\n“XMLHttpRequest”, indicating that the request was issued by a client library such as jQuery."
        },
        {
          "api": "req.accepts(types)",
          "description": "Checks if the specified content types are acceptable, based on the request’s Accept HTTP header field.\nThe method returns the best match, or if none of the specified content types is acceptable, returns\nfalse (in which case, the application should respond with 406 \"Not Acceptable\")."
        },
        {
          "api": "req.acceptsCharsets(charset [, ...])",
          "description": "Returns the first accepted charset of the specified character sets,\nbased on the request’s Accept-Charset HTTP header field.\nIf none of the specified charsets is accepted, returns false."
        },
        {
          "api": "req.acceptsEncodings(encoding [, ...])",
          "description": "Returns the first accepted encoding of the specified encodings,\nbased on the request’s Accept-Encoding HTTP header field.\nIf none of the specified encodings is accepted, returns false."
        },
        {
          "api": "req.acceptsLanguages(lang [, ...])",
          "description": "Returns the first accepted language of the specified languages,\nbased on the request’s Accept-Language HTTP header field.\nIf none of the specified languages is accepted, returns false."
        },
        {
          "api": "req.get(field)",
          "description": "Returns the specified HTTP request header field (case-insensitive match).\nThe Referrer and Referer fields are interchangeable."
        },
        {
          "api": "req.is(type)",
          "description": "Returns true if the incoming request’s “Content-Type” HTTP header field\nmatches the MIME type specified by the type parameter.\nReturns false otherwise."
        },
        {
          "api": "req.param(name [, defaultValue])",
          "description": "Deprecated. Use either req.params, req.body or req.query, as applicable."
        },
        {
          "api": "req.range(size[, options])",
          "description": "Range header parser."
        },
        {
          "api": "res.app",
          "description": "This property holds a reference to the instance of the Express application that is using the middleware."
        },
        {
          "api": "res.headersSent",
          "description": "Boolean property that indicates if the app sent HTTP headers for the response."
        },
        {
          "api": "res.locals",
          "description": "An object that contains response local variables scoped to the request, and therefore available only to\nthe view(s) rendered during that request / response cycle (if any). Otherwise,\nthis property is identical to app.locals."
        },
        {
          "api": "res.append(field [, value])",
          "description": "res.append() is supported by Express v4.11.0+"
        },
        {
          "api": "res.attachment([filename])",
          "description": "Sets the HTTP response Content-Disposition header field to “attachment”. If a filename is given,\nthen it sets the Content-Type based on the extension name via res.type(),\nand sets the Content-Disposition “filename=” parameter."
        },
        {
          "api": "res.cookie(name, value [, options])",
          "description": "Sets cookie name to value. The value parameter may be a string or object converted to JSON."
        },
        {
          "api": "res.clearCookie(name [, options])",
          "description": "Clears the cookie specified by name. For details about the options object, see res.cookie()."
        },
        {
          "api": "res.download(path [, filename] [, fn])",
          "description": "Transfers the file at path as an “attachment”. Typically, browsers will prompt the user for download.\nBy default, the Content-Disposition header “filename=” parameter is path (this typically appears in the browser dialog).\nOverride this default with the filename parameter."
        },
        {
          "api": "res.end([data] [, encoding])",
          "description": "Ends the response process. This method actually comes from Node core, specifically the response.end() method of http.ServerResponse."
        },
        {
          "api": "res.format(object)",
          "description": "Performs content-negotiation on the Accept HTTP header on the request object, when present.\nIt uses req.accepts() to select a handler for the request, based on the acceptable\ntypes ordered by their quality values. If the header is not specified, the first callback is invoked.\nWhen no match is found, the server responds with 406 “Not Acceptable”, or invokes the default callback."
        },
        {
          "api": "res.get(field)",
          "description": "Returns the HTTP response header specified by field.\nThe match is case-insensitive."
        },
        {
          "api": "res.json([body])",
          "description": "Sends a JSON response. This method sends a response (with the correct content-type) that is the parameter converted to a\nJSON string using JSON.stringify()."
        },
        {
          "api": "res.jsonp([body])",
          "description": "Sends a JSON response with JSONP support. This method is identical to res.json(),\nexcept that it opts-in to JSONP callback support."
        },
        {
          "api": "res.links(links)",
          "description": "Joins the links provided as properties of the parameter to populate the response’s\nLink HTTP header field."
        },
        {
          "api": "res.location(path)",
          "description": "Sets the response Location HTTP header to the specified path parameter."
        },
        {
          "api": "res.redirect([status,] path)",
          "description": "Redirects to the URL derived from the specified path, with specified status, a positive integer\nthat corresponds to an HTTP status code .\nIf not specified, status defaults to “302 “Found”."
        },
        {
          "api": "res.render(view [, locals] [, callback])",
          "description": "Renders a view and sends the rendered HTML string to the client.\nOptional parameters:"
        },
        {
          "api": "res.send([body])",
          "description": "Sends the HTTP response."
        },
        {
          "api": "res.sendFile(path [, options] [, fn])",
          "description": "res.sendFile() is supported by Express v4.8.0 onwards."
        },
        {
          "api": "res.sendStatus(statusCode)",
          "description": "Sets the response HTTP status code to statusCode and send its string representation as the response body."
        },
        {
          "api": "res.set(field [, value])",
          "description": "Sets the response’s HTTP header field to value.\nTo set multiple fields at once, pass an object as the parameter."
        },
        {
          "api": "res.status(code)",
          "description": "Sets the HTTP status for the response.\nIt is a chainable alias of Node’s response.statusCode."
        },
        {
          "api": "res.type(type)",
          "description": "Sets the Content-Type HTTP header to the MIME type as determined by\nmime.lookup() for the specified type.\nIf type contains the “/” character, then it sets the Content-Type to type."
        },
        {
          "api": "res.vary(field)",
          "description": "Adds the field to the Vary response header, if it is not there already."
        },
        {
          "api": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router.",
          "description": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router."
        },
        {
          "api": "router.all(path, [callback, ...] callback)",
          "description": "This method is just like the router.METHOD() methods, except that it matches all HTTP methods (verbs)."
        },
        {
          "api": "router.METHOD(path, [callback, ...] callback)",
          "description": "The router.METHOD() methods provide the routing functionality in Express,\nwhere METHOD is one of the HTTP methods, such as GET, PUT, POST, and so on,\nin lowercase. Thus, the actual methods are router.get(), router.post(),\nrouter.put(), and so on."
        },
        {
          "api": "router.param(name, callback)",
          "description": "Adds callback triggers to route parameters, where name is the name of the parameter and callback is the callback function. Although name is technically optional, using this method without it is deprecated starting with Express v4.11.0 (see below)."
        },
        {
          "api": "router.route(path)",
          "description": "Returns an instance of a single route which you can then use to handle HTTP verbs\nwith optional middleware. Use router.route() to avoid duplicate route naming and\nthus typing errors."
        },
        {
          "api": "router.use([path], [function, ...] function)",
          "description": "Uses the specified middleware function or functions, with optional mount path path, that defaults to “/”."
        }
      ],
      "Events": [
        {
          "api": "app.on('mount', callback(parent))",
          "description": "The mount event is fired on a sub-app, when it is mounted on a parent app. The parent app is passed to the callback function."
        },
        {
          "api": "app.all(path, callback [, callback ...])",
          "description": "This method is like the standard app.METHOD() methods,\nexcept it matches all HTTP verbs."
        },
        {
          "api": "app.delete(path, callback [, callback ...])",
          "description": "Routes HTTP DELETE requests to the specified path with the specified callback functions.\nFor more information, see the routing guide."
        },
        {
          "api": "app.disable(name)",
          "description": "Sets the Boolean setting name to false, where name is one of the properties from the app settings table.\nCalling app.set('foo', false) for a Boolean property is the same as calling app.disable('foo')."
        },
        {
          "api": "app.disabled(name)",
          "description": "Returns true if the Boolean setting name is disabled (false), where name is one of the properties from\nthe app settings table."
        },
        {
          "api": "app.enable(name)",
          "description": "Sets the Boolean setting name to true, where name is one of the properties from the app settings table.\nCalling app.set('foo', true) for a Boolean property is the same as calling app.enable('foo')."
        },
        {
          "api": "app.enabled(name)",
          "description": "Returns true if the setting name is enabled (true), where name is one of the\nproperties from the app settings table."
        },
        {
          "api": "app.engine(ext, callback)",
          "description": "Registers the given template engine callback as ext."
        },
        {
          "api": "app.get(name)",
          "description": "Returns the value of name app setting, where name is one of strings in the\napp settings table. For example:"
        },
        {
          "api": "app.get(path, callback [, callback ...])",
          "description": "Routes HTTP GET requests to the specified path with the specified callback functions."
        },
        {
          "api": "app.listen(path, [callback])",
          "description": "Starts a UNIX socket and listens for connections on the given path.\nThis method is identical to Node’s http.Server.listen()."
        },
        {
          "api": "app.METHOD(path, callback [, callback ...])",
          "description": "Routes an HTTP request, where METHOD is the HTTP method of the request, such as GET,\nPUT, POST, and so on, in lowercase. Thus, the actual methods are app.get(),\napp.post(), app.put(), and so on. See Routing methods below for the complete list."
        },
        {
          "api": "app.param([name], callback)",
          "description": "Add callback triggers to route parameters, where name is the name of the parameter or an array of them, and callback is the callback function. The parameters of the callback function are the request object, the response object, the next middleware, the value of the parameter and the name of the parameter, in that order."
        },
        {
          "api": "app.path()",
          "description": "Returns the canonical path of the app, a string."
        },
        {
          "api": "app.post(path, callback [, callback ...])",
          "description": "Routes HTTP POST requests to the specified path with the specified callback functions.\nFor more information, see the routing guide."
        },
        {
          "api": "app.put(path, callback [, callback ...])",
          "description": "Routes HTTP PUT requests to the specified path with the specified callback functions."
        },
        {
          "api": "app.render(view, [locals], callback)",
          "description": "Returns the rendered HTML of a view via the callback function. It accepts an optional parameter\nthat is an object containing local variables for the view. It is like res.render(),\nexcept it cannot send the rendered view to the client on its own."
        },
        {
          "api": "app.route(path)",
          "description": "Returns an instance of a single route, which you can then use to handle HTTP verbs with optional middleware.\nUse app.route() to avoid duplicate route names (and thus typo errors)."
        },
        {
          "api": "app.set(name, value)",
          "description": "Assigns setting name to value, where name is one of the properties from\nthe app settings table."
        },
        {
          "api": "app.use([path,] callback [, callback...])",
          "description": "Mounts the specified middleware function or functions\nat the specified path:\nthe middleware function is executed when the base of the requested path matches path."
        },
        {
          "api": "req.app",
          "description": "This property holds a reference to the instance of the Express application that is using the middleware."
        },
        {
          "api": "req.baseUrl",
          "description": "The URL path on which a router instance was mounted."
        },
        {
          "api": "req.body",
          "description": "Contains key-value pairs of data submitted in the request body.\nBy default, it is undefined, and is populated when you use body-parsing middleware such\nas body-parser and multer."
        },
        {
          "api": "req.cookies",
          "description": "When using cookie-parser middleware, this property is an object that\ncontains cookies sent by the request. If the request contains no cookies, it defaults to {}."
        },
        {
          "api": "req.fresh",
          "description": "Indicates whether the request is “fresh.” It is the opposite of req.stale."
        },
        {
          "api": "req.hostname",
          "description": "Contains the hostname derived from the Host HTTP header."
        },
        {
          "api": "req.ip",
          "description": "Contains the remote IP address of the request."
        },
        {
          "api": "req.ips",
          "description": "When the trust proxy setting does not evaluate to false,\nthis property contains an array of IP addresses\nspecified in the X-Forwarded-For request header. Otherwise, it contains an\nempty array. This header can be set by the client or by the proxy."
        },
        {
          "api": "req.method",
          "description": "Contains a string corresponding to the HTTP method of the request:\nGET, POST, PUT, and so on."
        },
        {
          "api": "req.originalUrl",
          "description": "req.url is not a native Express property, it is inherited from Node’s http module."
        },
        {
          "api": "req.params",
          "description": "This property is an object containing properties mapped to the named route “parameters”. For example, if you have the route /user/:name, then the “name” property is available as req.params.name. This object defaults to {}."
        },
        {
          "api": "req.path",
          "description": "Contains the path part of the request URL."
        },
        {
          "api": "req.protocol",
          "description": "Contains the request protocol string: either http or (for TLS requests) https."
        },
        {
          "api": "req.query",
          "description": "This property is an object containing a property for each query string parameter in the route.\nIf there is no query string, it is the empty object, {}."
        },
        {
          "api": "req.route",
          "description": "Contains the currently-matched route, a string. For example:"
        },
        {
          "api": "req.secure",
          "description": "A Boolean property that is true if a TLS connection is established. Equivalent to:"
        },
        {
          "api": "req.signedCookies",
          "description": "When using cookie-parser middleware, this property\ncontains signed cookies sent by the request, unsigned and ready for use. Signed cookies reside\nin a different object to show developer intent; otherwise, a malicious attack could be placed on\nreq.cookie values (which are easy to spoof). Note that signing a cookie does not make it “hidden”\nor encrypted; but simply prevents tampering (because the secret used to sign is private)."
        },
        {
          "api": "req.stale",
          "description": "Indicates whether the request is “stale,” and is the opposite of req.fresh.\nFor more information, see req.fresh."
        },
        {
          "api": "req.subdomains",
          "description": "An array of subdomains in the domain name of the request."
        },
        {
          "api": "req.xhr",
          "description": "A Boolean property that is true if the request’s X-Requested-With header field is\n“XMLHttpRequest”, indicating that the request was issued by a client library such as jQuery."
        },
        {
          "api": "req.accepts(types)",
          "description": "Checks if the specified content types are acceptable, based on the request’s Accept HTTP header field.\nThe method returns the best match, or if none of the specified content types is acceptable, returns\nfalse (in which case, the application should respond with 406 \"Not Acceptable\")."
        },
        {
          "api": "req.acceptsCharsets(charset [, ...])",
          "description": "Returns the first accepted charset of the specified character sets,\nbased on the request’s Accept-Charset HTTP header field.\nIf none of the specified charsets is accepted, returns false."
        },
        {
          "api": "req.acceptsEncodings(encoding [, ...])",
          "description": "Returns the first accepted encoding of the specified encodings,\nbased on the request’s Accept-Encoding HTTP header field.\nIf none of the specified encodings is accepted, returns false."
        },
        {
          "api": "req.acceptsLanguages(lang [, ...])",
          "description": "Returns the first accepted language of the specified languages,\nbased on the request’s Accept-Language HTTP header field.\nIf none of the specified languages is accepted, returns false."
        },
        {
          "api": "req.get(field)",
          "description": "Returns the specified HTTP request header field (case-insensitive match).\nThe Referrer and Referer fields are interchangeable."
        },
        {
          "api": "req.is(type)",
          "description": "Returns true if the incoming request’s “Content-Type” HTTP header field\nmatches the MIME type specified by the type parameter.\nReturns false otherwise."
        },
        {
          "api": "req.param(name [, defaultValue])",
          "description": "Deprecated. Use either req.params, req.body or req.query, as applicable."
        },
        {
          "api": "req.range(size[, options])",
          "description": "Range header parser."
        },
        {
          "api": "res.app",
          "description": "This property holds a reference to the instance of the Express application that is using the middleware."
        },
        {
          "api": "res.headersSent",
          "description": "Boolean property that indicates if the app sent HTTP headers for the response."
        },
        {
          "api": "res.locals",
          "description": "An object that contains response local variables scoped to the request, and therefore available only to\nthe view(s) rendered during that request / response cycle (if any). Otherwise,\nthis property is identical to app.locals."
        },
        {
          "api": "res.append(field [, value])",
          "description": "res.append() is supported by Express v4.11.0+"
        },
        {
          "api": "res.attachment([filename])",
          "description": "Sets the HTTP response Content-Disposition header field to “attachment”. If a filename is given,\nthen it sets the Content-Type based on the extension name via res.type(),\nand sets the Content-Disposition “filename=” parameter."
        },
        {
          "api": "res.cookie(name, value [, options])",
          "description": "Sets cookie name to value. The value parameter may be a string or object converted to JSON."
        },
        {
          "api": "res.clearCookie(name [, options])",
          "description": "Clears the cookie specified by name. For details about the options object, see res.cookie()."
        },
        {
          "api": "res.download(path [, filename] [, fn])",
          "description": "Transfers the file at path as an “attachment”. Typically, browsers will prompt the user for download.\nBy default, the Content-Disposition header “filename=” parameter is path (this typically appears in the browser dialog).\nOverride this default with the filename parameter."
        },
        {
          "api": "res.end([data] [, encoding])",
          "description": "Ends the response process. This method actually comes from Node core, specifically the response.end() method of http.ServerResponse."
        },
        {
          "api": "res.format(object)",
          "description": "Performs content-negotiation on the Accept HTTP header on the request object, when present.\nIt uses req.accepts() to select a handler for the request, based on the acceptable\ntypes ordered by their quality values. If the header is not specified, the first callback is invoked.\nWhen no match is found, the server responds with 406 “Not Acceptable”, or invokes the default callback."
        },
        {
          "api": "res.get(field)",
          "description": "Returns the HTTP response header specified by field.\nThe match is case-insensitive."
        },
        {
          "api": "res.json([body])",
          "description": "Sends a JSON response. This method sends a response (with the correct content-type) that is the parameter converted to a\nJSON string using JSON.stringify()."
        },
        {
          "api": "res.jsonp([body])",
          "description": "Sends a JSON response with JSONP support. This method is identical to res.json(),\nexcept that it opts-in to JSONP callback support."
        },
        {
          "api": "res.links(links)",
          "description": "Joins the links provided as properties of the parameter to populate the response’s\nLink HTTP header field."
        },
        {
          "api": "res.location(path)",
          "description": "Sets the response Location HTTP header to the specified path parameter."
        },
        {
          "api": "res.redirect([status,] path)",
          "description": "Redirects to the URL derived from the specified path, with specified status, a positive integer\nthat corresponds to an HTTP status code .\nIf not specified, status defaults to “302 “Found”."
        },
        {
          "api": "res.render(view [, locals] [, callback])",
          "description": "Renders a view and sends the rendered HTML string to the client.\nOptional parameters:"
        },
        {
          "api": "res.send([body])",
          "description": "Sends the HTTP response."
        },
        {
          "api": "res.sendFile(path [, options] [, fn])",
          "description": "res.sendFile() is supported by Express v4.8.0 onwards."
        },
        {
          "api": "res.sendStatus(statusCode)",
          "description": "Sets the response HTTP status code to statusCode and send its string representation as the response body."
        },
        {
          "api": "res.set(field [, value])",
          "description": "Sets the response’s HTTP header field to value.\nTo set multiple fields at once, pass an object as the parameter."
        },
        {
          "api": "res.status(code)",
          "description": "Sets the HTTP status for the response.\nIt is a chainable alias of Node’s response.statusCode."
        },
        {
          "api": "res.type(type)",
          "description": "Sets the Content-Type HTTP header to the MIME type as determined by\nmime.lookup() for the specified type.\nIf type contains the “/” character, then it sets the Content-Type to type."
        },
        {
          "api": "res.vary(field)",
          "description": "Adds the field to the Vary response header, if it is not there already."
        },
        {
          "api": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router.",
          "description": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router."
        },
        {
          "api": "router.all(path, [callback, ...] callback)",
          "description": "This method is just like the router.METHOD() methods, except that it matches all HTTP methods (verbs)."
        },
        {
          "api": "router.METHOD(path, [callback, ...] callback)",
          "description": "The router.METHOD() methods provide the routing functionality in Express,\nwhere METHOD is one of the HTTP methods, such as GET, PUT, POST, and so on,\nin lowercase. Thus, the actual methods are router.get(), router.post(),\nrouter.put(), and so on."
        },
        {
          "api": "router.param(name, callback)",
          "description": "Adds callback triggers to route parameters, where name is the name of the parameter and callback is the callback function. Although name is technically optional, using this method without it is deprecated starting with Express v4.11.0 (see below)."
        },
        {
          "api": "router.route(path)",
          "description": "Returns an instance of a single route which you can then use to handle HTTP verbs\nwith optional middleware. Use router.route() to avoid duplicate route naming and\nthus typing errors."
        },
        {
          "api": "router.use([path], [function, ...] function)",
          "description": "Uses the specified middleware function or functions, with optional mount path path, that defaults to “/”."
        }
      ],
      "Methods": [
        {
          "api": "app.all(path, callback [, callback ...])",
          "description": "This method is like the standard app.METHOD() methods,\nexcept it matches all HTTP verbs."
        },
        {
          "api": "app.delete(path, callback [, callback ...])",
          "description": "Routes HTTP DELETE requests to the specified path with the specified callback functions.\nFor more information, see the routing guide."
        },
        {
          "api": "app.disable(name)",
          "description": "Sets the Boolean setting name to false, where name is one of the properties from the app settings table.\nCalling app.set('foo', false) for a Boolean property is the same as calling app.disable('foo')."
        },
        {
          "api": "app.disabled(name)",
          "description": "Returns true if the Boolean setting name is disabled (false), where name is one of the properties from\nthe app settings table."
        },
        {
          "api": "app.enable(name)",
          "description": "Sets the Boolean setting name to true, where name is one of the properties from the app settings table.\nCalling app.set('foo', true) for a Boolean property is the same as calling app.enable('foo')."
        },
        {
          "api": "app.enabled(name)",
          "description": "Returns true if the setting name is enabled (true), where name is one of the\nproperties from the app settings table."
        },
        {
          "api": "app.engine(ext, callback)",
          "description": "Registers the given template engine callback as ext."
        },
        {
          "api": "app.get(name)",
          "description": "Returns the value of name app setting, where name is one of strings in the\napp settings table. For example:"
        },
        {
          "api": "app.get(path, callback [, callback ...])",
          "description": "Routes HTTP GET requests to the specified path with the specified callback functions."
        },
        {
          "api": "app.listen(path, [callback])",
          "description": "Starts a UNIX socket and listens for connections on the given path.\nThis method is identical to Node’s http.Server.listen()."
        },
        {
          "api": "app.METHOD(path, callback [, callback ...])",
          "description": "Routes an HTTP request, where METHOD is the HTTP method of the request, such as GET,\nPUT, POST, and so on, in lowercase. Thus, the actual methods are app.get(),\napp.post(), app.put(), and so on. See Routing methods below for the complete list."
        },
        {
          "api": "app.param([name], callback)",
          "description": "Add callback triggers to route parameters, where name is the name of the parameter or an array of them, and callback is the callback function. The parameters of the callback function are the request object, the response object, the next middleware, the value of the parameter and the name of the parameter, in that order."
        },
        {
          "api": "app.path()",
          "description": "Returns the canonical path of the app, a string."
        },
        {
          "api": "app.post(path, callback [, callback ...])",
          "description": "Routes HTTP POST requests to the specified path with the specified callback functions.\nFor more information, see the routing guide."
        },
        {
          "api": "app.put(path, callback [, callback ...])",
          "description": "Routes HTTP PUT requests to the specified path with the specified callback functions."
        },
        {
          "api": "app.render(view, [locals], callback)",
          "description": "Returns the rendered HTML of a view via the callback function. It accepts an optional parameter\nthat is an object containing local variables for the view. It is like res.render(),\nexcept it cannot send the rendered view to the client on its own."
        },
        {
          "api": "app.route(path)",
          "description": "Returns an instance of a single route, which you can then use to handle HTTP verbs with optional middleware.\nUse app.route() to avoid duplicate route names (and thus typo errors)."
        },
        {
          "api": "app.set(name, value)",
          "description": "Assigns setting name to value, where name is one of the properties from\nthe app settings table."
        },
        {
          "api": "app.use([path,] callback [, callback...])",
          "description": "Mounts the specified middleware function or functions\nat the specified path:\nthe middleware function is executed when the base of the requested path matches path."
        },
        {
          "api": "req.app",
          "description": "This property holds a reference to the instance of the Express application that is using the middleware."
        },
        {
          "api": "req.baseUrl",
          "description": "The URL path on which a router instance was mounted."
        },
        {
          "api": "req.body",
          "description": "Contains key-value pairs of data submitted in the request body.\nBy default, it is undefined, and is populated when you use body-parsing middleware such\nas body-parser and multer."
        },
        {
          "api": "req.cookies",
          "description": "When using cookie-parser middleware, this property is an object that\ncontains cookies sent by the request. If the request contains no cookies, it defaults to {}."
        },
        {
          "api": "req.fresh",
          "description": "Indicates whether the request is “fresh.” It is the opposite of req.stale."
        },
        {
          "api": "req.hostname",
          "description": "Contains the hostname derived from the Host HTTP header."
        },
        {
          "api": "req.ip",
          "description": "Contains the remote IP address of the request."
        },
        {
          "api": "req.ips",
          "description": "When the trust proxy setting does not evaluate to false,\nthis property contains an array of IP addresses\nspecified in the X-Forwarded-For request header. Otherwise, it contains an\nempty array. This header can be set by the client or by the proxy."
        },
        {
          "api": "req.method",
          "description": "Contains a string corresponding to the HTTP method of the request:\nGET, POST, PUT, and so on."
        },
        {
          "api": "req.originalUrl",
          "description": "req.url is not a native Express property, it is inherited from Node’s http module."
        },
        {
          "api": "req.params",
          "description": "This property is an object containing properties mapped to the named route “parameters”. For example, if you have the route /user/:name, then the “name” property is available as req.params.name. This object defaults to {}."
        },
        {
          "api": "req.path",
          "description": "Contains the path part of the request URL."
        },
        {
          "api": "req.protocol",
          "description": "Contains the request protocol string: either http or (for TLS requests) https."
        },
        {
          "api": "req.query",
          "description": "This property is an object containing a property for each query string parameter in the route.\nIf there is no query string, it is the empty object, {}."
        },
        {
          "api": "req.route",
          "description": "Contains the currently-matched route, a string. For example:"
        },
        {
          "api": "req.secure",
          "description": "A Boolean property that is true if a TLS connection is established. Equivalent to:"
        },
        {
          "api": "req.signedCookies",
          "description": "When using cookie-parser middleware, this property\ncontains signed cookies sent by the request, unsigned and ready for use. Signed cookies reside\nin a different object to show developer intent; otherwise, a malicious attack could be placed on\nreq.cookie values (which are easy to spoof). Note that signing a cookie does not make it “hidden”\nor encrypted; but simply prevents tampering (because the secret used to sign is private)."
        },
        {
          "api": "req.stale",
          "description": "Indicates whether the request is “stale,” and is the opposite of req.fresh.\nFor more information, see req.fresh."
        },
        {
          "api": "req.subdomains",
          "description": "An array of subdomains in the domain name of the request."
        },
        {
          "api": "req.xhr",
          "description": "A Boolean property that is true if the request’s X-Requested-With header field is\n“XMLHttpRequest”, indicating that the request was issued by a client library such as jQuery."
        },
        {
          "api": "req.accepts(types)",
          "description": "Checks if the specified content types are acceptable, based on the request’s Accept HTTP header field.\nThe method returns the best match, or if none of the specified content types is acceptable, returns\nfalse (in which case, the application should respond with 406 \"Not Acceptable\")."
        },
        {
          "api": "req.acceptsCharsets(charset [, ...])",
          "description": "Returns the first accepted charset of the specified character sets,\nbased on the request’s Accept-Charset HTTP header field.\nIf none of the specified charsets is accepted, returns false."
        },
        {
          "api": "req.acceptsEncodings(encoding [, ...])",
          "description": "Returns the first accepted encoding of the specified encodings,\nbased on the request’s Accept-Encoding HTTP header field.\nIf none of the specified encodings is accepted, returns false."
        },
        {
          "api": "req.acceptsLanguages(lang [, ...])",
          "description": "Returns the first accepted language of the specified languages,\nbased on the request’s Accept-Language HTTP header field.\nIf none of the specified languages is accepted, returns false."
        },
        {
          "api": "req.get(field)",
          "description": "Returns the specified HTTP request header field (case-insensitive match).\nThe Referrer and Referer fields are interchangeable."
        },
        {
          "api": "req.is(type)",
          "description": "Returns true if the incoming request’s “Content-Type” HTTP header field\nmatches the MIME type specified by the type parameter.\nReturns false otherwise."
        },
        {
          "api": "req.param(name [, defaultValue])",
          "description": "Deprecated. Use either req.params, req.body or req.query, as applicable."
        },
        {
          "api": "req.range(size[, options])",
          "description": "Range header parser."
        },
        {
          "api": "res.app",
          "description": "This property holds a reference to the instance of the Express application that is using the middleware."
        },
        {
          "api": "res.headersSent",
          "description": "Boolean property that indicates if the app sent HTTP headers for the response."
        },
        {
          "api": "res.locals",
          "description": "An object that contains response local variables scoped to the request, and therefore available only to\nthe view(s) rendered during that request / response cycle (if any). Otherwise,\nthis property is identical to app.locals."
        },
        {
          "api": "res.append(field [, value])",
          "description": "res.append() is supported by Express v4.11.0+"
        },
        {
          "api": "res.attachment([filename])",
          "description": "Sets the HTTP response Content-Disposition header field to “attachment”. If a filename is given,\nthen it sets the Content-Type based on the extension name via res.type(),\nand sets the Content-Disposition “filename=” parameter."
        },
        {
          "api": "res.cookie(name, value [, options])",
          "description": "Sets cookie name to value. The value parameter may be a string or object converted to JSON."
        },
        {
          "api": "res.clearCookie(name [, options])",
          "description": "Clears the cookie specified by name. For details about the options object, see res.cookie()."
        },
        {
          "api": "res.download(path [, filename] [, fn])",
          "description": "Transfers the file at path as an “attachment”. Typically, browsers will prompt the user for download.\nBy default, the Content-Disposition header “filename=” parameter is path (this typically appears in the browser dialog).\nOverride this default with the filename parameter."
        },
        {
          "api": "res.end([data] [, encoding])",
          "description": "Ends the response process. This method actually comes from Node core, specifically the response.end() method of http.ServerResponse."
        },
        {
          "api": "res.format(object)",
          "description": "Performs content-negotiation on the Accept HTTP header on the request object, when present.\nIt uses req.accepts() to select a handler for the request, based on the acceptable\ntypes ordered by their quality values. If the header is not specified, the first callback is invoked.\nWhen no match is found, the server responds with 406 “Not Acceptable”, or invokes the default callback."
        },
        {
          "api": "res.get(field)",
          "description": "Returns the HTTP response header specified by field.\nThe match is case-insensitive."
        },
        {
          "api": "res.json([body])",
          "description": "Sends a JSON response. This method sends a response (with the correct content-type) that is the parameter converted to a\nJSON string using JSON.stringify()."
        },
        {
          "api": "res.jsonp([body])",
          "description": "Sends a JSON response with JSONP support. This method is identical to res.json(),\nexcept that it opts-in to JSONP callback support."
        },
        {
          "api": "res.links(links)",
          "description": "Joins the links provided as properties of the parameter to populate the response’s\nLink HTTP header field."
        },
        {
          "api": "res.location(path)",
          "description": "Sets the response Location HTTP header to the specified path parameter."
        },
        {
          "api": "res.redirect([status,] path)",
          "description": "Redirects to the URL derived from the specified path, with specified status, a positive integer\nthat corresponds to an HTTP status code .\nIf not specified, status defaults to “302 “Found”."
        },
        {
          "api": "res.render(view [, locals] [, callback])",
          "description": "Renders a view and sends the rendered HTML string to the client.\nOptional parameters:"
        },
        {
          "api": "res.send([body])",
          "description": "Sends the HTTP response."
        },
        {
          "api": "res.sendFile(path [, options] [, fn])",
          "description": "res.sendFile() is supported by Express v4.8.0 onwards."
        },
        {
          "api": "res.sendStatus(statusCode)",
          "description": "Sets the response HTTP status code to statusCode and send its string representation as the response body."
        },
        {
          "api": "res.set(field [, value])",
          "description": "Sets the response’s HTTP header field to value.\nTo set multiple fields at once, pass an object as the parameter."
        },
        {
          "api": "res.status(code)",
          "description": "Sets the HTTP status for the response.\nIt is a chainable alias of Node’s response.statusCode."
        },
        {
          "api": "res.type(type)",
          "description": "Sets the Content-Type HTTP header to the MIME type as determined by\nmime.lookup() for the specified type.\nIf type contains the “/” character, then it sets the Content-Type to type."
        },
        {
          "api": "res.vary(field)",
          "description": "Adds the field to the Vary response header, if it is not there already."
        },
        {
          "api": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router.",
          "description": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router."
        },
        {
          "api": "router.all(path, [callback, ...] callback)",
          "description": "This method is just like the router.METHOD() methods, except that it matches all HTTP methods (verbs)."
        },
        {
          "api": "router.METHOD(path, [callback, ...] callback)",
          "description": "The router.METHOD() methods provide the routing functionality in Express,\nwhere METHOD is one of the HTTP methods, such as GET, PUT, POST, and so on,\nin lowercase. Thus, the actual methods are router.get(), router.post(),\nrouter.put(), and so on."
        },
        {
          "api": "router.param(name, callback)",
          "description": "Adds callback triggers to route parameters, where name is the name of the parameter and callback is the callback function. Although name is technically optional, using this method without it is deprecated starting with Express v4.11.0 (see below)."
        },
        {
          "api": "router.route(path)",
          "description": "Returns an instance of a single route which you can then use to handle HTTP verbs\nwith optional middleware. Use router.route() to avoid duplicate route naming and\nthus typing errors."
        },
        {
          "api": "router.use([path], [function, ...] function)",
          "description": "Uses the specified middleware function or functions, with optional mount path path, that defaults to “/”."
        }
      ]
    },
    {
      "name": "Request",
      "description": "The req object represents the HTTP request and has properties for the\nrequest query string, parameters, body, HTTP headers, and so on. In this documentation and by convention,\nthe object is always referred to as req (and the HTTP response is res) but its actual name is determined\nby the parameters to the callback function in which you’re working.",
      "Properties": [
        {
          "api": "req.app",
          "description": "This property holds a reference to the instance of the Express application that is using the middleware."
        },
        {
          "api": "req.baseUrl",
          "description": "The URL path on which a router instance was mounted."
        },
        {
          "api": "req.body",
          "description": "Contains key-value pairs of data submitted in the request body.\nBy default, it is undefined, and is populated when you use body-parsing middleware such\nas body-parser and multer."
        },
        {
          "api": "req.cookies",
          "description": "When using cookie-parser middleware, this property is an object that\ncontains cookies sent by the request. If the request contains no cookies, it defaults to {}."
        },
        {
          "api": "req.fresh",
          "description": "Indicates whether the request is “fresh.” It is the opposite of req.stale."
        },
        {
          "api": "req.hostname",
          "description": "Contains the hostname derived from the Host HTTP header."
        },
        {
          "api": "req.ip",
          "description": "Contains the remote IP address of the request."
        },
        {
          "api": "req.ips",
          "description": "When the trust proxy setting does not evaluate to false,\nthis property contains an array of IP addresses\nspecified in the X-Forwarded-For request header. Otherwise, it contains an\nempty array. This header can be set by the client or by the proxy."
        },
        {
          "api": "req.method",
          "description": "Contains a string corresponding to the HTTP method of the request:\nGET, POST, PUT, and so on."
        },
        {
          "api": "req.originalUrl",
          "description": "req.url is not a native Express property, it is inherited from Node’s http module."
        },
        {
          "api": "req.params",
          "description": "This property is an object containing properties mapped to the named route “parameters”. For example, if you have the route /user/:name, then the “name” property is available as req.params.name. This object defaults to {}."
        },
        {
          "api": "req.path",
          "description": "Contains the path part of the request URL."
        },
        {
          "api": "req.protocol",
          "description": "Contains the request protocol string: either http or (for TLS requests) https."
        },
        {
          "api": "req.query",
          "description": "This property is an object containing a property for each query string parameter in the route.\nIf there is no query string, it is the empty object, {}."
        },
        {
          "api": "req.route",
          "description": "Contains the currently-matched route, a string. For example:"
        },
        {
          "api": "req.secure",
          "description": "A Boolean property that is true if a TLS connection is established. Equivalent to:"
        },
        {
          "api": "req.signedCookies",
          "description": "When using cookie-parser middleware, this property\ncontains signed cookies sent by the request, unsigned and ready for use. Signed cookies reside\nin a different object to show developer intent; otherwise, a malicious attack could be placed on\nreq.cookie values (which are easy to spoof). Note that signing a cookie does not make it “hidden”\nor encrypted; but simply prevents tampering (because the secret used to sign is private)."
        },
        {
          "api": "req.stale",
          "description": "Indicates whether the request is “stale,” and is the opposite of req.fresh.\nFor more information, see req.fresh."
        },
        {
          "api": "req.subdomains",
          "description": "An array of subdomains in the domain name of the request."
        },
        {
          "api": "req.xhr",
          "description": "A Boolean property that is true if the request’s X-Requested-With header field is\n“XMLHttpRequest”, indicating that the request was issued by a client library such as jQuery."
        },
        {
          "api": "req.accepts(types)",
          "description": "Checks if the specified content types are acceptable, based on the request’s Accept HTTP header field.\nThe method returns the best match, or if none of the specified content types is acceptable, returns\nfalse (in which case, the application should respond with 406 \"Not Acceptable\")."
        },
        {
          "api": "req.acceptsCharsets(charset [, ...])",
          "description": "Returns the first accepted charset of the specified character sets,\nbased on the request’s Accept-Charset HTTP header field.\nIf none of the specified charsets is accepted, returns false."
        },
        {
          "api": "req.acceptsEncodings(encoding [, ...])",
          "description": "Returns the first accepted encoding of the specified encodings,\nbased on the request’s Accept-Encoding HTTP header field.\nIf none of the specified encodings is accepted, returns false."
        },
        {
          "api": "req.acceptsLanguages(lang [, ...])",
          "description": "Returns the first accepted language of the specified languages,\nbased on the request’s Accept-Language HTTP header field.\nIf none of the specified languages is accepted, returns false."
        },
        {
          "api": "req.get(field)",
          "description": "Returns the specified HTTP request header field (case-insensitive match).\nThe Referrer and Referer fields are interchangeable."
        },
        {
          "api": "req.is(type)",
          "description": "Returns true if the incoming request’s “Content-Type” HTTP header field\nmatches the MIME type specified by the type parameter.\nReturns false otherwise."
        },
        {
          "api": "req.param(name [, defaultValue])",
          "description": "Deprecated. Use either req.params, req.body or req.query, as applicable."
        },
        {
          "api": "req.range(size[, options])",
          "description": "Range header parser."
        },
        {
          "api": "res.app",
          "description": "This property holds a reference to the instance of the Express application that is using the middleware."
        },
        {
          "api": "res.headersSent",
          "description": "Boolean property that indicates if the app sent HTTP headers for the response."
        },
        {
          "api": "res.locals",
          "description": "An object that contains response local variables scoped to the request, and therefore available only to\nthe view(s) rendered during that request / response cycle (if any). Otherwise,\nthis property is identical to app.locals."
        },
        {
          "api": "res.append(field [, value])",
          "description": "res.append() is supported by Express v4.11.0+"
        },
        {
          "api": "res.attachment([filename])",
          "description": "Sets the HTTP response Content-Disposition header field to “attachment”. If a filename is given,\nthen it sets the Content-Type based on the extension name via res.type(),\nand sets the Content-Disposition “filename=” parameter."
        },
        {
          "api": "res.cookie(name, value [, options])",
          "description": "Sets cookie name to value. The value parameter may be a string or object converted to JSON."
        },
        {
          "api": "res.clearCookie(name [, options])",
          "description": "Clears the cookie specified by name. For details about the options object, see res.cookie()."
        },
        {
          "api": "res.download(path [, filename] [, fn])",
          "description": "Transfers the file at path as an “attachment”. Typically, browsers will prompt the user for download.\nBy default, the Content-Disposition header “filename=” parameter is path (this typically appears in the browser dialog).\nOverride this default with the filename parameter."
        },
        {
          "api": "res.end([data] [, encoding])",
          "description": "Ends the response process. This method actually comes from Node core, specifically the response.end() method of http.ServerResponse."
        },
        {
          "api": "res.format(object)",
          "description": "Performs content-negotiation on the Accept HTTP header on the request object, when present.\nIt uses req.accepts() to select a handler for the request, based on the acceptable\ntypes ordered by their quality values. If the header is not specified, the first callback is invoked.\nWhen no match is found, the server responds with 406 “Not Acceptable”, or invokes the default callback."
        },
        {
          "api": "res.get(field)",
          "description": "Returns the HTTP response header specified by field.\nThe match is case-insensitive."
        },
        {
          "api": "res.json([body])",
          "description": "Sends a JSON response. This method sends a response (with the correct content-type) that is the parameter converted to a\nJSON string using JSON.stringify()."
        },
        {
          "api": "res.jsonp([body])",
          "description": "Sends a JSON response with JSONP support. This method is identical to res.json(),\nexcept that it opts-in to JSONP callback support."
        },
        {
          "api": "res.links(links)",
          "description": "Joins the links provided as properties of the parameter to populate the response’s\nLink HTTP header field."
        },
        {
          "api": "res.location(path)",
          "description": "Sets the response Location HTTP header to the specified path parameter."
        },
        {
          "api": "res.redirect([status,] path)",
          "description": "Redirects to the URL derived from the specified path, with specified status, a positive integer\nthat corresponds to an HTTP status code .\nIf not specified, status defaults to “302 “Found”."
        },
        {
          "api": "res.render(view [, locals] [, callback])",
          "description": "Renders a view and sends the rendered HTML string to the client.\nOptional parameters:"
        },
        {
          "api": "res.send([body])",
          "description": "Sends the HTTP response."
        },
        {
          "api": "res.sendFile(path [, options] [, fn])",
          "description": "res.sendFile() is supported by Express v4.8.0 onwards."
        },
        {
          "api": "res.sendStatus(statusCode)",
          "description": "Sets the response HTTP status code to statusCode and send its string representation as the response body."
        },
        {
          "api": "res.set(field [, value])",
          "description": "Sets the response’s HTTP header field to value.\nTo set multiple fields at once, pass an object as the parameter."
        },
        {
          "api": "res.status(code)",
          "description": "Sets the HTTP status for the response.\nIt is a chainable alias of Node’s response.statusCode."
        },
        {
          "api": "res.type(type)",
          "description": "Sets the Content-Type HTTP header to the MIME type as determined by\nmime.lookup() for the specified type.\nIf type contains the “/” character, then it sets the Content-Type to type."
        },
        {
          "api": "res.vary(field)",
          "description": "Adds the field to the Vary response header, if it is not there already."
        },
        {
          "api": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router.",
          "description": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router."
        },
        {
          "api": "router.all(path, [callback, ...] callback)",
          "description": "This method is just like the router.METHOD() methods, except that it matches all HTTP methods (verbs)."
        },
        {
          "api": "router.METHOD(path, [callback, ...] callback)",
          "description": "The router.METHOD() methods provide the routing functionality in Express,\nwhere METHOD is one of the HTTP methods, such as GET, PUT, POST, and so on,\nin lowercase. Thus, the actual methods are router.get(), router.post(),\nrouter.put(), and so on."
        },
        {
          "api": "router.param(name, callback)",
          "description": "Adds callback triggers to route parameters, where name is the name of the parameter and callback is the callback function. Although name is technically optional, using this method without it is deprecated starting with Express v4.11.0 (see below)."
        },
        {
          "api": "router.route(path)",
          "description": "Returns an instance of a single route which you can then use to handle HTTP verbs\nwith optional middleware. Use router.route() to avoid duplicate route naming and\nthus typing errors."
        },
        {
          "api": "router.use([path], [function, ...] function)",
          "description": "Uses the specified middleware function or functions, with optional mount path path, that defaults to “/”."
        }
      ],
      "Methods": [
        {
          "api": "req.accepts(types)",
          "description": "Checks if the specified content types are acceptable, based on the request’s Accept HTTP header field.\nThe method returns the best match, or if none of the specified content types is acceptable, returns\nfalse (in which case, the application should respond with 406 \"Not Acceptable\")."
        },
        {
          "api": "req.acceptsCharsets(charset [, ...])",
          "description": "Returns the first accepted charset of the specified character sets,\nbased on the request’s Accept-Charset HTTP header field.\nIf none of the specified charsets is accepted, returns false."
        },
        {
          "api": "req.acceptsEncodings(encoding [, ...])",
          "description": "Returns the first accepted encoding of the specified encodings,\nbased on the request’s Accept-Encoding HTTP header field.\nIf none of the specified encodings is accepted, returns false."
        },
        {
          "api": "req.acceptsLanguages(lang [, ...])",
          "description": "Returns the first accepted language of the specified languages,\nbased on the request’s Accept-Language HTTP header field.\nIf none of the specified languages is accepted, returns false."
        },
        {
          "api": "req.get(field)",
          "description": "Returns the specified HTTP request header field (case-insensitive match).\nThe Referrer and Referer fields are interchangeable."
        },
        {
          "api": "req.is(type)",
          "description": "Returns true if the incoming request’s “Content-Type” HTTP header field\nmatches the MIME type specified by the type parameter.\nReturns false otherwise."
        },
        {
          "api": "req.param(name [, defaultValue])",
          "description": "Deprecated. Use either req.params, req.body or req.query, as applicable."
        },
        {
          "api": "req.range(size[, options])",
          "description": "Range header parser."
        },
        {
          "api": "res.app",
          "description": "This property holds a reference to the instance of the Express application that is using the middleware."
        },
        {
          "api": "res.headersSent",
          "description": "Boolean property that indicates if the app sent HTTP headers for the response."
        },
        {
          "api": "res.locals",
          "description": "An object that contains response local variables scoped to the request, and therefore available only to\nthe view(s) rendered during that request / response cycle (if any). Otherwise,\nthis property is identical to app.locals."
        },
        {
          "api": "res.append(field [, value])",
          "description": "res.append() is supported by Express v4.11.0+"
        },
        {
          "api": "res.attachment([filename])",
          "description": "Sets the HTTP response Content-Disposition header field to “attachment”. If a filename is given,\nthen it sets the Content-Type based on the extension name via res.type(),\nand sets the Content-Disposition “filename=” parameter."
        },
        {
          "api": "res.cookie(name, value [, options])",
          "description": "Sets cookie name to value. The value parameter may be a string or object converted to JSON."
        },
        {
          "api": "res.clearCookie(name [, options])",
          "description": "Clears the cookie specified by name. For details about the options object, see res.cookie()."
        },
        {
          "api": "res.download(path [, filename] [, fn])",
          "description": "Transfers the file at path as an “attachment”. Typically, browsers will prompt the user for download.\nBy default, the Content-Disposition header “filename=” parameter is path (this typically appears in the browser dialog).\nOverride this default with the filename parameter."
        },
        {
          "api": "res.end([data] [, encoding])",
          "description": "Ends the response process. This method actually comes from Node core, specifically the response.end() method of http.ServerResponse."
        },
        {
          "api": "res.format(object)",
          "description": "Performs content-negotiation on the Accept HTTP header on the request object, when present.\nIt uses req.accepts() to select a handler for the request, based on the acceptable\ntypes ordered by their quality values. If the header is not specified, the first callback is invoked.\nWhen no match is found, the server responds with 406 “Not Acceptable”, or invokes the default callback."
        },
        {
          "api": "res.get(field)",
          "description": "Returns the HTTP response header specified by field.\nThe match is case-insensitive."
        },
        {
          "api": "res.json([body])",
          "description": "Sends a JSON response. This method sends a response (with the correct content-type) that is the parameter converted to a\nJSON string using JSON.stringify()."
        },
        {
          "api": "res.jsonp([body])",
          "description": "Sends a JSON response with JSONP support. This method is identical to res.json(),\nexcept that it opts-in to JSONP callback support."
        },
        {
          "api": "res.links(links)",
          "description": "Joins the links provided as properties of the parameter to populate the response’s\nLink HTTP header field."
        },
        {
          "api": "res.location(path)",
          "description": "Sets the response Location HTTP header to the specified path parameter."
        },
        {
          "api": "res.redirect([status,] path)",
          "description": "Redirects to the URL derived from the specified path, with specified status, a positive integer\nthat corresponds to an HTTP status code .\nIf not specified, status defaults to “302 “Found”."
        },
        {
          "api": "res.render(view [, locals] [, callback])",
          "description": "Renders a view and sends the rendered HTML string to the client.\nOptional parameters:"
        },
        {
          "api": "res.send([body])",
          "description": "Sends the HTTP response."
        },
        {
          "api": "res.sendFile(path [, options] [, fn])",
          "description": "res.sendFile() is supported by Express v4.8.0 onwards."
        },
        {
          "api": "res.sendStatus(statusCode)",
          "description": "Sets the response HTTP status code to statusCode and send its string representation as the response body."
        },
        {
          "api": "res.set(field [, value])",
          "description": "Sets the response’s HTTP header field to value.\nTo set multiple fields at once, pass an object as the parameter."
        },
        {
          "api": "res.status(code)",
          "description": "Sets the HTTP status for the response.\nIt is a chainable alias of Node’s response.statusCode."
        },
        {
          "api": "res.type(type)",
          "description": "Sets the Content-Type HTTP header to the MIME type as determined by\nmime.lookup() for the specified type.\nIf type contains the “/” character, then it sets the Content-Type to type."
        },
        {
          "api": "res.vary(field)",
          "description": "Adds the field to the Vary response header, if it is not there already."
        },
        {
          "api": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router.",
          "description": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router."
        },
        {
          "api": "router.all(path, [callback, ...] callback)",
          "description": "This method is just like the router.METHOD() methods, except that it matches all HTTP methods (verbs)."
        },
        {
          "api": "router.METHOD(path, [callback, ...] callback)",
          "description": "The router.METHOD() methods provide the routing functionality in Express,\nwhere METHOD is one of the HTTP methods, such as GET, PUT, POST, and so on,\nin lowercase. Thus, the actual methods are router.get(), router.post(),\nrouter.put(), and so on."
        },
        {
          "api": "router.param(name, callback)",
          "description": "Adds callback triggers to route parameters, where name is the name of the parameter and callback is the callback function. Although name is technically optional, using this method without it is deprecated starting with Express v4.11.0 (see below)."
        },
        {
          "api": "router.route(path)",
          "description": "Returns an instance of a single route which you can then use to handle HTTP verbs\nwith optional middleware. Use router.route() to avoid duplicate route naming and\nthus typing errors."
        },
        {
          "api": "router.use([path], [function, ...] function)",
          "description": "Uses the specified middleware function or functions, with optional mount path path, that defaults to “/”."
        }
      ]
    },
    {
      "name": "Response",
      "description": "The res object represents the HTTP response that an Express app sends when it gets an HTTP request.",
      "Properties": [
        {
          "api": "res.app",
          "description": "This property holds a reference to the instance of the Express application that is using the middleware."
        },
        {
          "api": "res.headersSent",
          "description": "Boolean property that indicates if the app sent HTTP headers for the response."
        },
        {
          "api": "res.locals",
          "description": "An object that contains response local variables scoped to the request, and therefore available only to\nthe view(s) rendered during that request / response cycle (if any). Otherwise,\nthis property is identical to app.locals."
        },
        {
          "api": "res.append(field [, value])",
          "description": "res.append() is supported by Express v4.11.0+"
        },
        {
          "api": "res.attachment([filename])",
          "description": "Sets the HTTP response Content-Disposition header field to “attachment”. If a filename is given,\nthen it sets the Content-Type based on the extension name via res.type(),\nand sets the Content-Disposition “filename=” parameter."
        },
        {
          "api": "res.cookie(name, value [, options])",
          "description": "Sets cookie name to value. The value parameter may be a string or object converted to JSON."
        },
        {
          "api": "res.clearCookie(name [, options])",
          "description": "Clears the cookie specified by name. For details about the options object, see res.cookie()."
        },
        {
          "api": "res.download(path [, filename] [, fn])",
          "description": "Transfers the file at path as an “attachment”. Typically, browsers will prompt the user for download.\nBy default, the Content-Disposition header “filename=” parameter is path (this typically appears in the browser dialog).\nOverride this default with the filename parameter."
        },
        {
          "api": "res.end([data] [, encoding])",
          "description": "Ends the response process. This method actually comes from Node core, specifically the response.end() method of http.ServerResponse."
        },
        {
          "api": "res.format(object)",
          "description": "Performs content-negotiation on the Accept HTTP header on the request object, when present.\nIt uses req.accepts() to select a handler for the request, based on the acceptable\ntypes ordered by their quality values. If the header is not specified, the first callback is invoked.\nWhen no match is found, the server responds with 406 “Not Acceptable”, or invokes the default callback."
        },
        {
          "api": "res.get(field)",
          "description": "Returns the HTTP response header specified by field.\nThe match is case-insensitive."
        },
        {
          "api": "res.json([body])",
          "description": "Sends a JSON response. This method sends a response (with the correct content-type) that is the parameter converted to a\nJSON string using JSON.stringify()."
        },
        {
          "api": "res.jsonp([body])",
          "description": "Sends a JSON response with JSONP support. This method is identical to res.json(),\nexcept that it opts-in to JSONP callback support."
        },
        {
          "api": "res.links(links)",
          "description": "Joins the links provided as properties of the parameter to populate the response’s\nLink HTTP header field."
        },
        {
          "api": "res.location(path)",
          "description": "Sets the response Location HTTP header to the specified path parameter."
        },
        {
          "api": "res.redirect([status,] path)",
          "description": "Redirects to the URL derived from the specified path, with specified status, a positive integer\nthat corresponds to an HTTP status code .\nIf not specified, status defaults to “302 “Found”."
        },
        {
          "api": "res.render(view [, locals] [, callback])",
          "description": "Renders a view and sends the rendered HTML string to the client.\nOptional parameters:"
        },
        {
          "api": "res.send([body])",
          "description": "Sends the HTTP response."
        },
        {
          "api": "res.sendFile(path [, options] [, fn])",
          "description": "res.sendFile() is supported by Express v4.8.0 onwards."
        },
        {
          "api": "res.sendStatus(statusCode)",
          "description": "Sets the response HTTP status code to statusCode and send its string representation as the response body."
        },
        {
          "api": "res.set(field [, value])",
          "description": "Sets the response’s HTTP header field to value.\nTo set multiple fields at once, pass an object as the parameter."
        },
        {
          "api": "res.status(code)",
          "description": "Sets the HTTP status for the response.\nIt is a chainable alias of Node’s response.statusCode."
        },
        {
          "api": "res.type(type)",
          "description": "Sets the Content-Type HTTP header to the MIME type as determined by\nmime.lookup() for the specified type.\nIf type contains the “/” character, then it sets the Content-Type to type."
        },
        {
          "api": "res.vary(field)",
          "description": "Adds the field to the Vary response header, if it is not there already."
        },
        {
          "api": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router.",
          "description": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router."
        },
        {
          "api": "router.all(path, [callback, ...] callback)",
          "description": "This method is just like the router.METHOD() methods, except that it matches all HTTP methods (verbs)."
        },
        {
          "api": "router.METHOD(path, [callback, ...] callback)",
          "description": "The router.METHOD() methods provide the routing functionality in Express,\nwhere METHOD is one of the HTTP methods, such as GET, PUT, POST, and so on,\nin lowercase. Thus, the actual methods are router.get(), router.post(),\nrouter.put(), and so on."
        },
        {
          "api": "router.param(name, callback)",
          "description": "Adds callback triggers to route parameters, where name is the name of the parameter and callback is the callback function. Although name is technically optional, using this method without it is deprecated starting with Express v4.11.0 (see below)."
        },
        {
          "api": "router.route(path)",
          "description": "Returns an instance of a single route which you can then use to handle HTTP verbs\nwith optional middleware. Use router.route() to avoid duplicate route naming and\nthus typing errors."
        },
        {
          "api": "router.use([path], [function, ...] function)",
          "description": "Uses the specified middleware function or functions, with optional mount path path, that defaults to “/”."
        }
      ],
      "Methods": [
        {
          "api": "res.append(field [, value])",
          "description": "res.append() is supported by Express v4.11.0+"
        },
        {
          "api": "res.attachment([filename])",
          "description": "Sets the HTTP response Content-Disposition header field to “attachment”. If a filename is given,\nthen it sets the Content-Type based on the extension name via res.type(),\nand sets the Content-Disposition “filename=” parameter."
        },
        {
          "api": "res.cookie(name, value [, options])",
          "description": "Sets cookie name to value. The value parameter may be a string or object converted to JSON."
        },
        {
          "api": "res.clearCookie(name [, options])",
          "description": "Clears the cookie specified by name. For details about the options object, see res.cookie()."
        },
        {
          "api": "res.download(path [, filename] [, fn])",
          "description": "Transfers the file at path as an “attachment”. Typically, browsers will prompt the user for download.\nBy default, the Content-Disposition header “filename=” parameter is path (this typically appears in the browser dialog).\nOverride this default with the filename parameter."
        },
        {
          "api": "res.end([data] [, encoding])",
          "description": "Ends the response process. This method actually comes from Node core, specifically the response.end() method of http.ServerResponse."
        },
        {
          "api": "res.format(object)",
          "description": "Performs content-negotiation on the Accept HTTP header on the request object, when present.\nIt uses req.accepts() to select a handler for the request, based on the acceptable\ntypes ordered by their quality values. If the header is not specified, the first callback is invoked.\nWhen no match is found, the server responds with 406 “Not Acceptable”, or invokes the default callback."
        },
        {
          "api": "res.get(field)",
          "description": "Returns the HTTP response header specified by field.\nThe match is case-insensitive."
        },
        {
          "api": "res.json([body])",
          "description": "Sends a JSON response. This method sends a response (with the correct content-type) that is the parameter converted to a\nJSON string using JSON.stringify()."
        },
        {
          "api": "res.jsonp([body])",
          "description": "Sends a JSON response with JSONP support. This method is identical to res.json(),\nexcept that it opts-in to JSONP callback support."
        },
        {
          "api": "res.links(links)",
          "description": "Joins the links provided as properties of the parameter to populate the response’s\nLink HTTP header field."
        },
        {
          "api": "res.location(path)",
          "description": "Sets the response Location HTTP header to the specified path parameter."
        },
        {
          "api": "res.redirect([status,] path)",
          "description": "Redirects to the URL derived from the specified path, with specified status, a positive integer\nthat corresponds to an HTTP status code .\nIf not specified, status defaults to “302 “Found”."
        },
        {
          "api": "res.render(view [, locals] [, callback])",
          "description": "Renders a view and sends the rendered HTML string to the client.\nOptional parameters:"
        },
        {
          "api": "res.send([body])",
          "description": "Sends the HTTP response."
        },
        {
          "api": "res.sendFile(path [, options] [, fn])",
          "description": "res.sendFile() is supported by Express v4.8.0 onwards."
        },
        {
          "api": "res.sendStatus(statusCode)",
          "description": "Sets the response HTTP status code to statusCode and send its string representation as the response body."
        },
        {
          "api": "res.set(field [, value])",
          "description": "Sets the response’s HTTP header field to value.\nTo set multiple fields at once, pass an object as the parameter."
        },
        {
          "api": "res.status(code)",
          "description": "Sets the HTTP status for the response.\nIt is a chainable alias of Node’s response.statusCode."
        },
        {
          "api": "res.type(type)",
          "description": "Sets the Content-Type HTTP header to the MIME type as determined by\nmime.lookup() for the specified type.\nIf type contains the “/” character, then it sets the Content-Type to type."
        },
        {
          "api": "res.vary(field)",
          "description": "Adds the field to the Vary response header, if it is not there already."
        },
        {
          "api": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router.",
          "description": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router."
        },
        {
          "api": "router.all(path, [callback, ...] callback)",
          "description": "This method is just like the router.METHOD() methods, except that it matches all HTTP methods (verbs)."
        },
        {
          "api": "router.METHOD(path, [callback, ...] callback)",
          "description": "The router.METHOD() methods provide the routing functionality in Express,\nwhere METHOD is one of the HTTP methods, such as GET, PUT, POST, and so on,\nin lowercase. Thus, the actual methods are router.get(), router.post(),\nrouter.put(), and so on."
        },
        {
          "api": "router.param(name, callback)",
          "description": "Adds callback triggers to route parameters, where name is the name of the parameter and callback is the callback function. Although name is technically optional, using this method without it is deprecated starting with Express v4.11.0 (see below)."
        },
        {
          "api": "router.route(path)",
          "description": "Returns an instance of a single route which you can then use to handle HTTP verbs\nwith optional middleware. Use router.route() to avoid duplicate route naming and\nthus typing errors."
        },
        {
          "api": "router.use([path], [function, ...] function)",
          "description": "Uses the specified middleware function or functions, with optional mount path path, that defaults to “/”."
        }
      ]
    },
    {
      "name": "Router",
      "description": "A router object is an isolated instance of middleware and routes. You can think of it\nas a “mini-application,” capable only of performing middleware and routing\nfunctions. Every Express application has a built-in app router.\nA router behaves like middleware itself, so you can use it as an argument to\napp.use() or as the argument to another router’s use() method.\nThe top-level express object has a Router() method that creates a new router object.\nOnce you’ve created a router object, you can add middleware and HTTP method routes (such as get, put, post,\nand so on) to it just like an application. For example:\n// invoked for any requests passed to this router\nrouter.use(function(req, res, next) {\n  // .. some logic here .. like any other middleware\n  next();\n});\n\n// will handle any request that ends in /events\n// depends on where the router is \"use()'d\"\nrouter.get('/events', function(req, res, next) {\n  // ..\n});\n\nYou can then use a router for a particular root URL in this way separating your routes into files or even mini-apps.\n// only requests to /calendar/* will be sent to our \"router\"\napp.use('/calendar', router);",
      "Methods": [
        {
          "api": "router.all(path, [callback, ...] callback)",
          "description": "This method is just like the router.METHOD() methods, except that it matches all HTTP methods (verbs)."
        },
        {
          "api": "router.METHOD(path, [callback, ...] callback)",
          "description": "The router.METHOD() methods provide the routing functionality in Express,\nwhere METHOD is one of the HTTP methods, such as GET, PUT, POST, and so on,\nin lowercase. Thus, the actual methods are router.get(), router.post(),\nrouter.put(), and so on."
        },
        {
          "api": "router.param(name, callback)",
          "description": "Adds callback triggers to route parameters, where name is the name of the parameter and callback is the callback function. Although name is technically optional, using this method without it is deprecated starting with Express v4.11.0 (see below)."
        },
        {
          "api": "router.route(path)",
          "description": "Returns an instance of a single route which you can then use to handle HTTP verbs\nwith optional middleware. Use router.route() to avoid duplicate route naming and\nthus typing errors."
        },
        {
          "api": "router.use([path], [function, ...] function)",
          "description": "Uses the specified middleware function or functions, with optional mount path path, that defaults to “/”."
        }
      ]
    }
  ]
}